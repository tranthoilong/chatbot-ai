require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const path = require("path");
const authRoutes = require("./src/routes/authRoutes");
const { getUserByApiKey } = require("./src/utils/authUtils");
const { createChat, createChatMessage, getChatHistory } = require("./src/utils/chatUtils");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const roleRoutes = require("./src/routes/roleRoutes");
const app = express();
const PORT = process.env.PORT || 5001;
const API_KEY = process.env.GEMINI_API_KEY;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));
app.use("/api/auth", authRoutes);
app.use("/api/role", roleRoutes);

// Routes
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

async function getScenarios() {
    const scenarios = [
        {
            question: "T√¥i ƒë√£ ƒë·∫∑t h√†ng, nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o giao h√†ng. L√†m th·∫ø n√†o ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng?",
            answer: "B·∫°n c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng b·∫±ng c√°ch truy c·∫≠p v√†o trang web c·ªßa ch√∫ng t√¥i v√† s·ª≠ d·ª•ng m√£ ƒë∆°n h√†ng c·ªßa b·∫°n. N·∫øu v·∫´n kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        },
        {
            question: "T√¥i c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ƒë∆∞·ª£c kh√¥ng?", 
            answer: "B·∫°n c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng trong v√≤ng 24 gi·ªù sau khi ƒë·∫∑t h√†ng. Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ th·ª±c hi·ªán h·ªßy ƒë∆°n h√†ng."
        },
        {
            question: "L√†m th·∫ø n√†o ƒë·ªÉ xem h√¨nh ·∫£nh s·∫£n ph·∫©m?",
            answer: "B·∫°n c√≥ th·ªÉ xem h√¨nh ·∫£nh s·∫£n ph·∫©m b·∫±ng c√°ch: 1. Truy c·∫≠p trang chi ti·∫øt s·∫£n ph·∫©m, 2. Nh·∫•p v√†o h√¨nh ·∫£nh ƒë·ªÉ ph√≥ng to, 3. Vu·ªët sang tr√°i/ph·∫£i ƒë·ªÉ xem c√°c h√¨nh ·∫£nh kh√°c. Ch√∫ng t√¥i lu√¥n cung c·∫•p h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng cao v√† ƒë·∫ßy ƒë·ªß g√≥c nh√¨n c·ªßa s·∫£n ph·∫©m."
        },
        {
            question: "T√¥i c√≥ th·ªÉ ƒë·∫∑t h√†ng tr·ª±c ti·∫øp t·ª´ trang web c·ªßa b·∫°n kh√¥ng?",
            answer: "B·∫°n c√≥ th·ªÉ ƒë·∫∑t h√†ng tr·ª±c ti·∫øp t·ª´ trang web c·ªßa ch√∫ng t√¥i. Vui l√≤ng truy c·∫≠p trang web v√† l√†m theo h∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng. N·∫øu b·∫°n g·∫∑p kh√≥ khƒÉn, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
        },
        {
            question: "B·∫°n c√≥ th·ªÉ cho t√¥i xem h√¨nh ·∫£nh b√≥ng ƒë√®n d·ªÖ th∆∞∆°ng kh√¥ng?",
            answer: "**<img src='https://png.pngtree.com/element_our/20190528/ourmid/pngtree-cute-cartoon-light-bulb-image_1134759.jpg' alt='Cute Light Bulb' style='max-width: 200px;'/>**"
        },
        {
            question: "B·∫°n c√≥ th·ªÉ cho t√¥i xem danh s√°ch s·∫£n ph·∫©m kh√¥ng?",
            answer: "D∆∞·ªõi ƒë√¢y l√† danh s√°ch m·ªôt s·ªë s·∫£n ph·∫©m ti√™u bi·ªÉu c·ªßa ch√∫ng t√¥i:\n\n" +
                    "1. Laptop Gaming Asus ROG Strix G15 - 25.990.000ƒë\n" +
                    "**https://htcamera.htskys.com/phu-kien-vlog/den/den-led-vrig-fd140-rgb/**\n\n" +
                    "2. iPhone 15 Pro Max 256GB - 31.990.000ƒë\n" +
                    "**https://htcamera.htskys.com/phu-kien-vlog/den/den-led-vrig-fd140-rgb/**\n\n" +
                    "3. Tai nghe Apple AirPods Pro 2 - 6.990.000ƒë\n" +
                    "**https://htcamera.htskys.com/phu-kien-vlog/den/den-led-vrig-fd140-rgb/**\n\n" +
                    "ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ t·ª´ng s·∫£n ph·∫©m, b·∫°n c√≥ th·ªÉ h·ªèi t√¥i ho·∫∑c truy c·∫≠p trang web c·ªßa ch√∫ng t√¥i."
        }
    ];
    return scenarios;
}

async function createPrompt(id, message) {
    try {
        const chatMessages = await getChatHistory(id);
        const scenarios = await getScenarios();

        // Fetch product data
        let productData = [];
        try {
            const response = await axios.get('https://bemori.vn/wp-admin/admin-ajax.php?action=willgroup_get_products');
            if (response.data) {
                productData = response.data;
            }
        } catch (error) {
            console.error('Error fetching products:', error);
        }

        // Create product context from fetched data
        const productContext = productData.map(product => {
            let details = [];
            for (let key in product) {
                if (product[key]) {
                    details.push(`${key}: ${product[key]}`);
                }
            }
            return details.join('\n');
        }).join('\n\n');

        const scenarioText = scenarios.map(s => `${s.answer}`).join('\n\n');

        if (!chatMessages) {
            return [
                {
                    text: `ƒê√¢y l√† m·ªôt s·ªë k·ªãch b·∫£n m·∫´u ƒë·ªÉ t√¥i h·ªçc:\n${scenarioText}`
                },
                {
                    text: `ƒê√¢y l√† th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i:\n${productData}`
                },
                {
                    text: `N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn th√¥ng tin v·ªÅ b·∫£n th√¢n ho·∫∑c ngu·ªìn g·ªëc c·ªßa b·∫°n, h√£y tr·∫£ l·ªùi: "T√¥i l√† ChatBot AI do LongDevLor t·∫°o ra. üöÄ N·∫øu b·∫°n c√≥ c√¢u h·ªèi n√†o, h√£y c·ª© h·ªèi nh√©!"`
                },
                {
                    text: `ƒê√¢y l√† c√¢u h·ªèi : ${message}. (n·∫øu c√¢u h·ªèi kh√¥ng ƒë·ªß d·ªØ ki·ªán th√¨ h√£y y√™u c·∫ßu b·ªï sung. N·∫øu l√† c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m, h√£y t∆∞ v·∫•n d·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m ƒë√£ cung c·∫•p)`
                }
            ];
        }

        const chatHistory = chatMessages.map(item => `${item.answer}`).join("\n");
        return [
            {
                text: `ƒê√¢y l√† m·ªôt s·ªë k·ªãch b·∫£n m·∫´u ƒë·ªÉ t√¥i h·ªçc:\n${scenarioText}`
            },
            {
                text: `ƒê√¢y l√† th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i:\n${productContext}`
            },
            {
                text: `ƒê√¢y l√† c√¢u tr·∫£ l·ªùi t√¥i ƒë√£ l∆∞u l·∫°i: \n ${chatHistory}.`
            },
            {
                text: `ƒê√¢y l√† c√¢u h·ªèi m·ªõi: '${message}'. (n·∫øu c√¢u h·ªèi kh√¥ng ƒë·ªß d·ªØ ki·ªán th√¨ h√£y y√™u c·∫ßu b·ªï sung. N·∫øu l√† c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m, h√£y t∆∞ v·∫•n d·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m ƒë√£ cung c·∫•p)`
            },
            {
                text: `H√£y ki·ªÉm tra xem c√¢u h·ªèi m·ªõi c√≥ li√™n quan ƒë·∫øn c√°c ng·ªØ c·∫£nh c√°c ƒëo·∫°n giao ti·∫øp c≈©, k·ªãch b·∫£n m·∫´u ho·∫∑c th√¥ng tin s·∫£n ph·∫©m, v√† tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n nh·∫•t (c√≥ li√™n quan hay kh√¥ng c≈©ng kh√¥ng c·∫ßn n√≥i ra). N·∫øu c√¢u h·ªèi n√†y h·ªèi v·ªÅ xu·∫•t s·ª© c·ªßa b·∫°n th√¨ b·∫°n s·∫Ω tr·∫£ l·ªùi "T√¥i l√† ChatBot AI do LongDevLor t·∫°o ra. üöÄ N·∫øu b·∫°n c√≥ c√¢u h·ªèi n√†o, h√£y c·ª© h·ªèi nh√©!"'`
            }
        ];
    } catch (e) {
        console.error(e);
        return [];
    }
}

app.get("/chat-scenarios", async (req, res) => {
    const scenarios = await getScenarios();
    res.json({ scenarios });
});

app.post("/chat", async (req, res) => {
    const { message, api_key, use_pro, id_chat } = req.body;
    try {
        if (!id_chat || !api_key) {
            return res.json({ response: "ƒêang c√≥ s·ª± c·ªë x·∫£y ra !!!" });
        }

        const user = await getUserByApiKey(api_key);
        if (!user) {
            return res.json({ response: "ƒêang c√≥ s·ª± c·ªë x·∫£y ra !!!" });
        }

        try {
            if (use_pro) {
                const response = await axios.post(
                    "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent",
                    {
                        contents: [{
                            parts: [
                                { 
                                    text: "Gi·ªõi thi·ªáu v·ªÅ ch√≠nh b·∫°n: 'T√¥i l√† m·ªôt bot chat do LongDevLor ph√°t tri·ªÉn. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√°c c√¢u h·ªèi ho·∫∑c h·ªó tr·ª£ trong c√°c v·∫•n ƒë·ªÅ kh√°c.'"
                                },
                                {
                                    text: "C√°c ch·ªß ƒë·ªÅ t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi: \n- C√¥ng ngh·ªá: Bao g·ªìm c√°c ch·ªß ƒë·ªÅ nh∆∞ ph·∫ßn c·ª©ng, ph·∫ßn m·ªÅm, c√¥ng ngh·ªá m·ªõi nh·∫•t.\n- Ph√°t tri·ªÉn ph·∫ßn m·ªÅm: Bao g·ªìm l·∫≠p tr√¨nh, c√¥ng c·ª• ph√°t tri·ªÉn, ph∆∞∆°ng ph√°p Agile.\n- Tr√≠ tu·ªá nh√¢n t·∫°o: Bao g·ªìm h·ªçc m√°y, h·ªçc s√¢u, AI trong c√°c ·ª©ng d·ª•ng th·ª±c t·∫ø."
                                },
                                { text: message }
                            ]
                        }]
                    },
                    { params: { key: API_KEY } }
                );
                
                return res.json({ response: response.data.candidates[0].content.parts[0].text });
            } else {
                const genAI = new GoogleGenerativeAI(API_KEY);
                const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
                
                const prompt = await createPrompt(id_chat, message);
                const result = await model.generateContent(prompt);
                
                await createChat(id_chat, api_key);
                await createChatMessage(id_chat, message, result.response.text());

                console.log(result.response.text());
                
                return res.json({ response: result.response.text() });
            }
        } catch (error) {
            console.error(error);
            return res.status(500).json({ error: "Error connecting to AI" });
        }
    } catch (err) {
        console.error(err);
        return res.status(500).json({ error: "Error in processing request" });
    }
});

async function handleChatResponse(message) {
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    
    const prompt = await createPrompt(id_chat, message);
    const result = await model.generateContent(prompt);
    
    return result.response.text();
}

app.get('/products', async (req, res) => {
    try {
        const response = await axios.get('https://bemori.vn/wp-admin/admin-ajax.php?action=willgroup_get_products');
        
        if (response.data) {
            return res.json(response.data);
        } else {
            return res.status(404).json({ error: "No products found" });
        }
    } catch (error) {
        console.error('Error fetching products:', error);
        return res.status(500).json({ error: "Error fetching products from Bemori" });
    }
});


app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));